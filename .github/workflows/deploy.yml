# GitHub Workflow to deploy the Reference Architecture based on the form submission.
name: RefArch start deploy

# Run only after the preflight checks pass, on the main branch.
# NOTE: This has the risk of running multiple concurrent deployments against the same repo. To mitigate this, the
#       refarch-deployer command implements a locking mechanism that ensures that only one deployment thread is running
#       at a time.
on:
  workflow_run:
    workflows:
      - Complete Preflight Checks
    types:
      - completed
    branches:
      - main

# Allow assuming the IAM role
permissions:
  id-token: write
  contents: read

jobs:
  deploy:
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3

    - name: configure aws credentials
      uses: aws-actions/configure-aws-credentials@master
      with:
        role-to-assume: "arn:aws:iam::583800379690:role/allow-auto-deploy-from-github-actions-v2"
        role-session-name: "github-actions-${{ github.run_id }}"
        aws-region: us-east-1

    - name: login to ecr
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: invoke deployment
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: infrastructure-deployer
        IMAGE_TAG: v0.47.11
        DEPLOY_RUNNER_REGION: us-east-1
        INVOKER_FUNCTION_ARN: "arn:aws:lambda:us-east-1:583800379690:function:refarch-deployer-edr-v2-invoker"
        REPO_NAME: "${{ github.event.repository.name }}"
        REF: "${{ github.ref_name }}"
      run: |
        docker run \
          -e AWS_ACCESS_KEY_ID \
          -e AWS_SECRET_ACCESS_KEY \
          -e AWS_SESSION_TOKEN \
          "$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" \
          --aws-region "$DEPLOY_RUNNER_REGION" --invoker-function-id "$INVOKER_FUNCTION_ARN" --no-wait \
          -- refarch-deployer-runner run-refarch-deploy \
             --infra-live-repo-name "$REPO_NAME" \
             --ref "$REF" \
             --repo-token "$(cat .repo_token)"
